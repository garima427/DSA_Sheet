void merge(int arr[],int l,int mid, int h){
  int cnt =0;
  
  vector<int> temp;
  int left = l;
  int right = mid+1;

  while(left<=mid && right<=h){
    if(arr[left]<=arr[right]){
      temp.push_back(arr[left++]);
    }
    else{
      temp.push_back(arr[right++]);
    }
  }
  while(left<=mid){
    temp.push_back(arr[left++]);
  }
   while(right<=h){
   temp.push_back(arr[right++]);
  }

  for(int i=l; i<=h; i++){
    arr[i]=temp[i-l];
  }
}

int countPairs(int arr[],int l,int  mid, int h){
  int cnt = 0;
  int right = mid+1;
  for(int i=l; i<=mid; i++){
    while(right<=h && arr[i]>2*arr[right]){
      cnt+=(right-(mid+1));
      right++;
    }
  }
  return cnt;
}

int mergeSort(int arr[],int l,int h){
  int cnt = 0;
  if(l>=h)
    return cnt;
    
  int mid = l+(h-l)/2;
  
  cnt+=mergeSort(arr,l,mid);
  cnt+=mergeSort(arr,mid+1,h);
  cnt+=countPairs(arr,l,mid,h);
  
  merge(arr,l,mid,h);

  return cnt;
}
int reversePairs(int[] arr, int n){
  return mergeSort(arr,0,n-1);
}
