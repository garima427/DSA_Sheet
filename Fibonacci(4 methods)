#include <iostream>
#include <vector>
using namespace std;

int recursion_fib(int n){
    if(n<=1) 
        return n;

    return recursion_fib(n-1)+recursion_fib(n-2);
}

int memoization_fib(int n, vector<int> &dp){
        if(n<=1) 
            return n;

        if(dp[n]!=-1) 
            return dp[n];

        return dp[n]=memoization_fib(n-1,dp)+memoization_fib(n-2,dp);
}

int tabulation_fib(int n){
    vector<int> dp(n+1,-1);
    
    dp[0]=0;
    dp[1]=1;

    for(int i=2;i<=n;i++){
        dp[i]=dp[i-1]+dp[i-2];
    }

    return dp[n];
}

int optimal_fib(int n){
  if(n<=1) 
    return n;

  int prev2 = 0, prev = 1,curr;

  for(int i=2;i<=n;i++){
    curr=prev2+prev;
    prev2=prev;
    prev=curr;
  }

  return prev;
}
int main(){
    int n = 5;

    cout<<recursion_fib(n)<<endl;
    cout<<tabulation_fib(n)<<endl;
    
    vector<int> dp(n+1,-1);
    cout<<memoization_fib(n,dp)<<endl;

    cout<<optimal_fib(n)<<endl;
}
