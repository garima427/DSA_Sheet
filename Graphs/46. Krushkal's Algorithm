class DisjointSet{
  vector<int> size;
  vector<int> parent;
  DisjointSet(int n){
    rank.resize(n+1,1);
    parent.resize(n+1);
    for(int i=0; i<n; i++)
      parent[i] = i;
  }
    int findUPar(int node){
      if(node == parent[node])
        return node;
      return parent[node] = findUPar(parent[node]);
    }
    void unionBySize(int u, int v){
      int ulp_u = findUPar(u);
      int ulp_v = findUPar(v);
      if(ulp_u == ulp_v)
        return;
      if(size[ulp_u]<size[ulp_v]){
        parent[ulp_u] = ulp_v;
        size[ulp_v]+=size[ulp_u];
      }
      else{
        parent[ulp_v] = ulp_u;
        size[ulp_u]+=size[ulp_v];
      }
    }
  };


int spanningTree(vector<vector<int>> adj[],int v){
  vector<pair<int,pair<int,int>>> edges;
  for(int i=0; i<v; i++){
    for(auto it: adj[i]){
      int adjNode = it[0];
      int wt = it[1];
      edges[i].push_back(wt,{i, adjNode});     // wt, node, adjnode
    }
  }

  sort(edges.begin(),edges.end());
  int sum = 0;
  DisjointSet ds(v);
  
  for(auto it  : edges){
    int wt = it.first;
    int node = it.second.first;
    int adjNode = it.second.second;
    if(ds.findUPar(node)!= ds.findUPar(adjNode)){
      sum+=wt;
      s.unionBySize(node,adjNode);
    }
  }
  return sum;
}
