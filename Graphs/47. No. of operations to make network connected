class DisjointSet{
        public:
        vector<int> rank;
        vector<int> parent;

        DisjointSet(int n){
            rank.resize(n+1,0);
            parent.resize(n+1);
            for(int i=0; i<=n; i++)
                parent[i] = i;
        }

        int findUPar(int node){
            if(node == parent[node])
                return node;
            return parent[node] = findUPar(parent[node]);
        }

        void Union(int u, int v){
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if(ulp_u == ulp_v)
                return;
            if(rank[ulp_u]<rank[ulp_v]){
                parent[ulp_u] = ulp_v;
            }
            else if(rank[ulp_u]>rank[ulp_v]){
                parent[ulp_v] = ulp_u;
            }
            else{
                parent[ulp_v] = ulp_u;
                rank[ulp_u]++;
            }
        }
};
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size()<n-1)
            return -1;

        DisjointSet ds(n);
        int extraEdges = 0;

        for(auto it: connections){
            int u = it[0];
            int v = it[1];
            if(ds.findUPar(u)==ds.findUPar(v)){
                extraEdges++;
            }
            else{
                ds.Union(u,v);
            }
        }

        int comp = 0;
        for(int i=0; i<n; i++){
            if(ds.parent[i]==i)
                comp++;
        }

        int ans = comp-1;
        if(extraEdges>=ans) 
            return ans;
        else 
            return -1;
    }
