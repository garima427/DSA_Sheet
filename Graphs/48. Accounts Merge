class Solution {
public:
    class DisjointSet{
        public:
        vector<int> rank;
        vector<int> parent;
        DisjointSet(int n){
            rank.resize(n+1,0);
            parent.resize(n+1);
            for(int i=0; i<n; i++)
            parent[i] = i;
        }

        int findUPar(int node){
            if(node == parent[node])
                return node;
            return parent[node] = findUPar(parent[node]);
        }

        void Union(int u, int v){
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if(ulp_u == ulp_v)
                return;
            if(rank[ulp_u]<rank[ulp_v]){
                parent[ulp_u] = ulp_v;
            }
            else if(rank[ulp_u]>rank[ulp_v]){
                parent[ulp_v] = ulp_u;
            }
            else{
                parent[ulp_v] = ulp_u;
                rank[ulp_u]++;
            }
        }
    };
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisjointSet ds(n);
        unordered_map<string,int> mpp;
        for(int i=0; i<n; i++){
        for(int j=1; j<accounts[i].size(); j++){
            if(!mpp.count(accounts[i][j])){
            mpp[accounts[i][j]] = i;
            }
            else{
            ds.Union(i,mpp[accounts[i][j]]);
            }
        }
        }

        vector<vector<string>> mergeMail(n);
        for(auto it:mpp){
        string mail = it.first;
        int node = ds.findUPar(it.second);
        mergeMail[node].push_back(mail);
        }

        vector<vector<string>> ans;
        for(int i=0; i<n; i++){
            if(mergeMail[i].empty()) continue;

            sort(mergeMail[i].begin(),mergeMail[i].end());
            
            vector<string> temp;
            temp.push_back(accounts[i][0]);

            for(auto it : mergeMail[i]){
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
        }
};
