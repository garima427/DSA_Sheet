int shortestPath(vector<vector<int>>& grid, pair<int,int> source, pair<int,int> dest) {
  int n = grid.size();
  vector<vector<int>> dist(n,vector<int>(n,INT_MAX));
  queue<pair<int,pair<int,int>>> q;

  int sr = source.first;
  int sc = source.second;
  dist[sr][sc]=0;

  int destr = dest.first;
  int destc = dest.second;
  
  q.push({0,source});

  int dr[]={0,-1,0,1};
  int dc[]={-1,0,1,0};
  
  while(!q.empty()){
    int d = q.front().first;
    int r = q.front().second.first;
    int c = q.front().second.second;
    q.pop();

    for(int i=0; i<4; i++){
      int nr = r+dr[i];
      int nc = c+dc[i];
      if(nr>=0 && nr<n && nc>=0 && nc<n && grid[nr][nc]){
        if(dist[nr][nc] > d+1){
          dist[nr][nc] = d+1;
          
          if(nr == destr && nc == destc){
              return dist[nr][nc];
          }
          
          q.push({d+1,{nr,nc}});
        }
      }
    }
  }
  return -1;  
}
