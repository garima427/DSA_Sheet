int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adj(n);
        for(auto it : flights){
          adj[it[0]].push_back({it[1], it[2]});
        }
        vector<int> dist(n,INT_MAX);
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{src,0}}); // {stops, {node, cost}};

        while(!q.empty()){
            auto it = q.front();
            q.pop();
            int stops = it.first;
            int node = it.second.first;
            int cost = it.second.second;

            if(stops>k) continue;

                for(auto iter : adj[node]){
                    int adjNode = iter.first;
                    int edgeWt = iter.second;
                    if(edgeWt+cost<dist[adjNode]){
                        dist[adjNode] = edgeWt+cost;
                        q.push({stops+1,{adjNode,dist[adjNode]}});
                    }
            }
        }

        return (dist[dst]==INT_MAX)?-1:dist[dst];
        }
