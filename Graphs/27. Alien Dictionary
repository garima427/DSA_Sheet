vector<int> kahnAlgo(int v, vector<vector<int>> &adj){
  vector<int> inDegree(v,0);
  vector<int> order;
  
  for(int i=0; i<v; i++){
    for(auto adjNode : adj[i])
      inDegree[adjNode]++;
  }
  
  queue<int> q;
  for(int i=0; i<v; i++){
    if(inDegree[i]==0)
      q.push(i);
  }
  
  while(!q.empty()){
    int node = q.front();
    order.push_back(node);
    q.pop();

    for(auto adjNode : adj[node]){
      inDegree[adjNode]--;
      if(inDegree[adjNode]==0)
        q.push(adjNode);
    }
  }
  return order;
}
string findOrder(string dict[], int n, int k){
  vector<vector<int>> adj(k);
  vector<int> order;

  for(int i=0; i<n-1; i++){
    string s1 = dict[i];
    string s2 = dict[i+1];
    int len = min(s1.size(),s2.size());
    for(int j=0; j<len; j++){
      if(s1[j]!=s2[j]){
        adj[s1[j]-'a'].push_back(s2[j]-'a');
        break;
      }
    }
  }

  order = kahnAlgo(k,adj);
  string ans = "";
  for(auto it : order){
    ans+=char(it+'a');
  }
  return ans;
}
