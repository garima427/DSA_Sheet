int networkDelayTime(vector<vector<int>>& edges, int n, int k) {
    vector<vector<pair<int,int>>> adj(n+1);
    for (auto &it : edges) {
        int u = it[0], v = it[1], w = it[2];
        adj[u].push_back({v, w});
    }

    vector<int> signal(n+1, INT_MAX);
    signal[k] = 0;

    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    pq.push({0, k}); // {time, node}

    while (!pq.empty()) {
        auto [time, node] = pq.top();
        pq.pop();

        if (time > signal[node]) continue; // outdated entry

        for (auto [adjNode, wt] : adj[node]) {
            if (time + wt < signal[adjNode]) {
                signal[adjNode] = time + wt;
                pq.push({signal[adjNode], adjNode});
            }
        }
    }

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        if (signal[i] == INT_MAX) return -1; // unreachable node
        ans = max(ans, signal[i]);
    }
    return ans;
}
