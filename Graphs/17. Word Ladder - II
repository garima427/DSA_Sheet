vector<vector<string>> shortestSeq(vector<string> wordList, string beginWord, string endWord){
  vector<vector<string>> ans;
  vector<string> onLevel;
  onLevel.push_back(beginWord);
  
  unordered_set st(wordList.begin(),wordList.end());
  queue<vector<string>> q;
  q.push({beginWord});
  int level = 0;
  
  while(!q.empty()){
    vector<string> seq = q.front();
    q.pop();
    string word = seq.back();

    if(seq.size()>level){
      level++;
       for(auto it: onLevel){
          onLevel.erase(it);
       }
    }
    
    if(word==endWord){
      if(ans.empty())
        ans.push_back(seq);
      else if(ans[0].size()==seq.size())
        ans.push_back(seq);
    } 
    
    for(int i=0; i<word.size(); i++){
      char og = word[i];
      for(char ch = 'a'; ch<='z'; ch++){
        word[i]=ch;
        if(st.count(word)){
          seq.push_back(word);
          q.push(seq);
          onLevel.push_back(word);
          seq.pop_back();
        }
        word[i]=og;
      }
    }
  
  }
  return ans;
}
