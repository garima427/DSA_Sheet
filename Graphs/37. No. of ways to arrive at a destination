int countPaths(int n, vector<vector<int>>& roads) {
    vector<vector<pair<int,int>> adj(n);
    for(auto it : roads){
      int u = it[0];
      int v = it[1];
      int t = it[2];
      adj[u].push_back({v,t});
      adj[v].push_back({u,t});
    }

    vector<int> dist(n,INT_MAX);
    vector<int> ways(n,0);
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    dist[0]=0;
    ways[0]=1;
    pq.push({0,0});

    while(!pq.empty()){
      int d = pq.top().first;
      int node = pq.top().second;
      pq.pop();

      for(auto it : adj[node]){
        int adjNode = it.first;
        int edW = it.second;
        if(d+edW < dist[adjNode]){
          dist[adjNode] = d+edW;
          q.push({dist[adjNode],adjNode});
          ways[adjNode] = ways[node];
        }
        else if(d+edW = dist[adjNode]){
          ways[adjNode] += ways[node];
        }
      }
    }
    return ways[n-1];
}
