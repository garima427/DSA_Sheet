bool check(int start, int n,vector<vector<int>>& graph,vector<int> &color){
  queue<int> q;
  q.push(start);
  while(!q.empty()){
    int node = q.front();
    q.pop();
    for(auto adjNode :  graph[node]){
      if(color[adjNode]==-1){
        q.push(adjNode);
        color[adjNode]=!color[node];
      }
      else if(color[adjNode]==color[node]){
        return false;
      }
    }
  }
  return true;
}
bool isBipartite(vector<vector<int>>& graph) {
  int n = graph.size();
  vector<int> color(n,-1);
  for(int i=0; i<n; i++){
    if(color[i]==-1){
      if(check(i,n,graph,color)==false)
        return false;
    }
  }
  return true;
}
