void bfs(int r, int c,vector<vector<int>> &adj,vector<vector<int>> &vis){
  int n = adj.size();
  int m = adj[0].size();
  
  vis[r][c]=1;
  queue<pair<int,int>> q;
  q.push({r,c});
  
  while(!q.empty()){
    int row = q.front().first;
    int col = q.front().second;
    q.pop();
    for(int i = -1; i<=1; i++){
      for(int j = -1; j<=1; j++){
        int nr = i+row;
        int nc = j+col;
        if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && adj[nr][nc]){
          vis[nr][nc]=1;
          q.push({nr,nc});
        }
      }
    }
  }
}
int numberOfIslands(vector<vector<int>> &adj){
  int r = adj.size();
  int c = adj[0].size();
  vector<vector<int>> vis(r,vector<int>(c,0));
  int islands = 0;
  
  for(int i=0; i<r; i++){
    for(int j=0; j<c; j++){
      if(adj[i][j]==1 && !vis[i][j]){
        bfs(i,j,adj,vis);
        islands++;
      }
    }
  }
  return islands;
}



class DisjointSet{
  public:
  vector<int> rank;
  vector<int> parent;
  DisjointSet(int n){
    rank.resize(n+1,0);
    parent.resize(n+1);
    for(int i=0; i<n; i++)
      parent[i] = i;
    }

    int findUPar(int node){
      if(node == parent[node])
        return node;
      return parent[node] = findUPar(parent[node]);
    }

    void Union(int u, int v){
      int ulp_u = findUPar(u);
      int ulp_v = findUPar(v);
      if(ulp_u == ulp_v)
        return;
      if(rank[ulp_u]<rank[ulp_v]){
        parent[ulp_u] = ulp_v;
      }
      else if(rank[ulp_u]>rank[ulp_v]){
        parent[ulp_v] = ulp_u;
      }
      else{
        parent[ulp_v] = ulp_u;
        rank[ulp_u]++;
      }
    }
}

int numberOfIslands(vector<vector<int>> &adj){
  int r = adj.size();
  int c = adj[0].size();
  int islands = 0;
  DisjointSet ds(r*c);

  int dr[] = {-1,0,1,0};
  int dc[] = {0,-1,0,1};

  for(int i=0; i<r; i++){
    for(int j=0; j<c; j++){
      if(adj[i][j]==1){
        for(int k=0; k<4; k++){
          int nr = i + dr[k];
          int nc = j + dc[k];
          if(nr>=0 && nr<r && nc>=0 && nc<c && adj[nr][nc]){
            int node = i*c + j;
            int adjNode = nr*c + nc;
            if(ds.findUPar(node)!=ds.findUPar(adjNode)){
                ds.Union(node,adjNode);
            }
          }
        }
        
      }
    }
  }

  for(int i=0; i<r; i++){
     for(int j=0; j<c; j++){
        int node = i*c + j;
        if(adj[i][j] && ds.findUPar(node)==node)
          islands++;
     }
  }
  return islands;
}

