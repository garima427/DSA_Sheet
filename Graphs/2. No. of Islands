void bfs(int r, int c,vector<vector<int>> &adj,vector<vector<int>> &vis){
  int n = adj.size();
  int m = adj[0].size();
  
  vis[r][c]=1;
  queue<pair<int,int>> q;
  q.push({r,c});
  
  while(!q.empty()){
    int row = q.front().first;
    int col = q.front().second;
    q.pop();
    for(int i = -1; i<=1; i++){
      for(int j = -1; j<=1; j++){
        int nr = i+row;
        int nc = j+col;
        if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && adj[nr][nc]){
          vis[nr][nc]=1;
          q.push({nr,nc});
        }
      }
    }
  }
}
int numberOfIslands(vector<vector<int>> &adj){
  int r = adj.size();
  int c = adj[0].size();
  vector<vector<int>> vis(r,vector<int>(c,0));
  int islands = 0;
  
  for(int i=0; i<r; i++){
    for(int j=0; j<c; j++){
      if(adj[i][j]==1 && !vis[i][j]){
        bfs(i,j,adj,vis);
        islands++;
      }
    }
  }
  return islands;
}
