#include <bits/stdc++.h>
using namespace std;
int max_Sum(vector<int> &arr,int n){
                                                //  Optimal
    int prev2 = arr[0];
    int prev = max(arr[1],arr[0]);
    int curr;
    
    for(int i=2;i<n;i++){
        int pick = arr[i]+prev2;
        int not_pick = prev;
        
        curr = max(pick,not_pick);
        
        prev2=prev;
        prev = curr;
    }
    
    return prev;
}

int max_Sum(vector<int> &arr,int n){
                                                //  TABULATION
    vector<int> dp(n,INT_MIN);
    
    dp[0] = arr[0];
    dp[1]= max(arr[0],arr[1]);
    
    for(int i=2;i<n;i++){
        int pick = dp[i-2]+arr[i];
        int not_pick = dp[i-1];
        
        dp[i] = max(pick,not_pick);
    }
    
    return dp[n-1];
}


int max_Sum(vector<int> &arr,int n,vector<int> &dp){
    if(n==0) 
        return dp[0]=arr[0];
    if(n==1) 
        return dp[1]=max(arr[0],arr[1]);          //  MEMOIZATION
    
    if(dp[n]!=INT_MIN) 
        return dp[n];
    
    int pick = arr[n]+ max_Sum(arr,n-2);
    int not_pick = max_Sum(arr,n-1);
    
    return dp[n]=max(pick,not_pick);
}

int max_Sum(vector<int> &arr,int n){
    if(n==0) 
        return arr[0];
    if(n==1) 
        return max(arr[0],arr[1]);          //  RECURSION
    
    int pick = arr[n]+ max_Sum(arr,n-2,dp);
    int not_pick = max_Sum(arr,n-1,dp);
    
    return max(pick,not_pick);
}
int main()
{
    vector<int> arr = {10,20,30,45,6};
    int n = arr.size();
    cout << max_Sum(arr,n,dp);
    return 0;
}
