int maxMerit(vector<vector<int>> merit,int last, int day){
  if(day==0){
    int maxm = 0;
    for(int i=0; i<3; i++){
      if(i!=last){
        maxm = max(merit[0][i], maxm);
    }
  }
  return maxm;
  }                                              //Recursion
  int maxm = 0;
  for(int i=0; i<3; i++){
    if(i!=last){
    int points = merit[day][i] + maxMerit(merit,i,day-1);
    maxm = max(points, maxm);
    }
  }
  return maxm;
}

int maxMerit(vector<vector<int>> merit,int last, int day, vector<vector<int>> &dp){
  if(day==0){
    int maxm = 0;
    for(int i=0; i<3; i++){
      if(i!=last){
        maxm = max(merit[0][i], maxm);
    }
  }
  return dp[0][last]=maxm;
  }                                                          //Memoization

  if(dp[day][last]!=-1) return dp[day][last];
  
  int maxm = 0;
  for(int i=0; i<3; i++){
    if(i!=last){
    int points = merit[day][i] + maxMerit(merit,i,day-1,dp);
    maxm = max(points, maxm);
    }
  }
  return dp[day][last]=maxm;
}

int maxMerit(vector<vector<int>> merit,int last, int day){
  vector<vector<int>> dp;
  dp[0][0] = max(merit[0][1],merit[0][2]);
  dp[0][1] = max(merit[0][0],merit[0][2]);
  dp[0][2] = max(merit[0][0],merit[0][1]);
                                                    //Tabulation
  for(int day=0; day<days; day++){
    for(int last=0; last<3; last++){
      dp[day][last] = 0;
      for(int task=0;task<3;task++){
        if(task!=last){
        int points = merit[day][task]+dp[day-1][task];
        dp[day][last] = max(points,dp[day][last]);
      }   
    }
  }
}
return dp[day][last];
}
