#include <bits/stdc++.h>
using namespace std;

int count_Energy(int n,vector<int> &height,int k){
    vector<int> dp(n+1,INT_MAX);
    
    dp[0]=0;
    dp[1]=abs(height[1]-height[0]);
    
    int energy = INT_MAX;
    
    for(int i=2;i<=n;i++){
        for(int j=1;j<=k;j++){
        if(n-j>=0){
            int jumps = dp[n-j]+abs(height[n]-height[n-j]);
            energy = min(jumps,energy);
        }
    }
    }
        return dp[n-1];
}

/*
int count_Energy(int n,vector<int> &height,int k,vector<int> &dp){
    if(n==0) 
        return dp[0]=0;
    
    if(n==1) 
        return dp[1]=abs(height[1]-height[0]);
    
    if(dp[n]!=-1) return dp[n];
    
    int energy = INT_MAX;
    
    for(int j=1;j<=k;j++){
        if(n-j>=0){
            int jumps = count_Energy(n-j,height,k)+abs(height[n]-height[n-j]);
            energy = min(jumps,energy);
        }
    }
    
    
    return dp[n]=energy;
}

int count_Energy(int n,vector<int> &height,int k){
    if(n==0) 
        return 0;
    if(n==1) 
        return abs(height[1]-height[0]);
        
    int energy = INT_MAX;
    
    for(int j=1;j<=k;j++){
        if(n-j>=0){
            int jumps = count_Energy(n-j,height,k)+abs(height[n]-height[n-j]);
            energy = min(jumps,energy);
        }
    }
    
    return energy;
}
*/
int main()
{
    vector<int> height = {30,10,60,10,60,50};
    int n = height.size();
    vector<int> dp(n+1,INT_MAX);
    cout<<count_Energy(n-1,height,n-1);
    return 0;
}
